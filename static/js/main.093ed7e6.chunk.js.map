{"version":3,"sources":["Table.js","App.js","serviceWorker.js","index.js"],"names":["Table","useState","id","fname","lname","sname","email","gender","age","data","setData","editable","onRowAdd","newData","Promise","resolve","reject","setTimeout","onBulkUpdate","changes","onRowDelete","oldData","dataDelete","index","tableData","splice","title","columns","field","options","paging","selection","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yRAGaA,EAAQ,WAAO,IAAD,EACDC,mBAAS,CAC/B,CACEC,GAAI,EACJC,MAAO,OACPC,MAAO,QACPC,MAAO,WACPC,MAAO,oBACPC,OAAQ,IACRC,IAAK,IAEP,CACEN,GAAI,EACJC,MAAO,UACPC,MAAO,WACPC,MAAO,cACPC,MAAO,sBACPC,OAAQ,IACRC,IAAK,IAEP,CACEN,GAAI,EACJC,MAAO,QACPC,MAAO,SACPC,MAAO,kBACPC,MAAO,qBACPC,OAAQ,IACRC,IAAK,MA3BgB,mBAClBC,EADkB,KACZC,EADY,KA6DzB,OACE,6BACE,kBAAC,IAAD,CACEC,SAAU,CACRC,SAAU,SAAAC,GAAO,OACf,IAAIC,SAAQ,SAACC,EAASC,GACpBC,YAAW,WACTP,EAAQ,GAAD,mBAAKD,GAAL,CAAWI,KAElBE,MACC,SAEPG,aAAc,SAAAC,GAAO,OACnB,IAAIL,SAAQ,SAACC,EAASC,GACpBC,YAAW,WACTF,MACC,SAEPK,YAAa,SAAAC,GAAO,OAClB,IAAIP,SAAQ,SAACC,EAASC,GACpBC,YAAW,WACT,IAAMK,EAAU,YAAOb,GACjBc,EAAQF,EAAQG,UAAUtB,GAChCoB,EAAWG,OAAOF,EAAO,GACzBb,EAAQ,YAAIY,IAEZP,MACC,UAGTW,MAAM,GACNjB,KAAMA,EACNkB,QA/DU,CACd,CACED,MAAO,IACPE,MAAO,MAET,CACEF,MAAO,aACPE,MAAO,SAET,CACEF,MAAO,YACPE,MAAO,SAET,CACEF,MAAO,iBACPE,MAAO,SAET,CACEF,MAAO,SACPE,MAAO,SAET,CACEF,MAAO,SACPE,MAAO,UAET,CACEF,MAAO,MACPE,MAAO,QAqCLC,QAAS,CACPC,QAAQ,EACRC,WAAW,O,OCrFNC,MAVf,WACE,OACE,oCACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,SCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.093ed7e6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport MaterialTable from \"material-table\";\n\nexport const Table = () => {\n  const [data, setData] = useState([\n    {\n      id: 1,\n      fname: \"Tony\",\n      lname: \"Stark\",\n      sname: \"Iron Man\",\n      email: \"tony@avengers.com\",\n      gender: \"M\",\n      age: 53\n    },\n    {\n      id: 2,\n      fname: \"Natasha\",\n      lname: \"Romanova\",\n      sname: \"Black Widow\",\n      email: \"natsha@avengers.com\",\n      gender: \"F\",\n      age: 34\n    },\n    {\n      id: 3,\n      fname: \"Steve\",\n      lname: \"Rogers\",\n      sname: \"Caption America\",\n      email: \"steve@avengers.com\",\n      gender: \"M\",\n      age: 99\n    }\n  ]);\n  const columns = [\n    {\n      title: \"#\",\n      field: \"id\"\n    },\n    {\n      title: \"First Name\",\n      field: \"fname\"\n    },\n    {\n      title: \"Last Name\",\n      field: \"lname\"\n    },\n    {\n      title: \"Superhero Name\",\n      field: \"sname\"\n    },\n    {\n      title: \"Email \",\n      field: \"email\"\n    },\n    {\n      title: \"Gender\",\n      field: \"gender\"\n    },\n    {\n      title: \"Age\",\n      field: \"age\"\n    }\n  ];\n\n  return (\n    <div>\n      <MaterialTable\n        editable={{\n          onRowAdd: newData =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                setData([...data, newData]);\n\n                resolve();\n              }, 1000);\n            }),\n          onBulkUpdate: changes =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                resolve();\n              }, 1000);\n            }),\n          onRowDelete: oldData =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                const dataDelete = [...data];\n                const index = oldData.tableData.id;\n                dataDelete.splice(index, 1);\n                setData([...dataDelete]);\n\n                resolve();\n              }, 1000);\n            })\n        }}\n        title=\"\"\n        data={data}\n        columns={columns}\n        options={{\n          paging: false,\n          selection: true\n        }}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Table } from \"./Table\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"App\">\n        <Table />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}